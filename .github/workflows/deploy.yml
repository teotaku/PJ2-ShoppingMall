name: Deploy to EC2

on:
  push:
    branches:
      - main


jobs:
  Deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Github Repository에 올린 파일들 불러오기
        uses: actions/checkout@v4

      - name: gradlew에 실행 권한 부여
        run: chmod +x gradlew

      - name: JDK 17버전 설치
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - name: application.yml 생성
        run: |
          echo "$APPLICATION_PROPERTIES" > src/main/resources/application.yml
        env:
          APPLICATION_PROPERTIES: ${{ secrets.APPLICATION_PROPERTIES }}

      - name: 테스트 및 빌드하기
        run: ./gradlew clean build -stacktrace

      - name: 테스트 실패 상세 로그 출력 (정확한 Bean 에러 확인용)
        if: failure()
        run: cat build/reports/tests/test/classes/supercoding.pj2.Pj2ApplicationTests.html || echo "클래스 리포트 없음"

      - name: application.yml 확인
        run: cat src/main/resources/application.yml

      # ✅ ✅ ✅ 새로 추가: AWS ECR 인증을 위한 IAM 키 등록
      # AWS에 인증된 상태 ( 깃헙 액션이 AWS CLI인증 로그인상태 )
      - name: AWS 자격 증명 설정
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }} # 깃헙 시크릿에 등록된 값
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }} # 깃헙 시크릿에 등록된 값
          aws-region: ap-northeast-2

      # ✅ ✅ ✅ 새로 추가: Docker → ECR 로그인 (ID/PW 없이 IAM 인증 기반으로 토큰 발급받아 로그인함)
      # 위에 인증된상태를 기반으로 amazon-ecr-login이
      - name: Amazon ECR 로그인
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Docker 이미지 빌드 및 ECR 푸시
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: supercodingpj2-server
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: SSH로 EC2에 접속하여 Docker 이미지 실행
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script_stop: true
          script: |
            aws ecr get-login-password --region ap-northeast-2 | docker login --username AWS --password-stdin ${{ steps.login-ecr.outputs.registry }}
            docker pull ${{ steps.login-ecr.outputs.registry }}/supercodingpj2-server:latest
            docker stop app-container || true
            docker rm app-container || true
            docker run -d --name app-container -p 8080:8080 ${{ steps.login-ecr.outputs.registry }}/supercodingpj2-server:latest
          



