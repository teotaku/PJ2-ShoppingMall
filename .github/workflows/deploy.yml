name: Deploy to EC2

on:
  push:
    branches:
      - main

#jobs:
#  Deploy:
#    runs-on: ubuntu-latest
#    steps:
#      - name: SSH로 EC2에 접속하기
#        uses: appleboy/ssh-action@v1.0.3
#        with:
#          host: ${{ secrets.EC2_HOST }}
#          username: ${{ secrets.EC2_USERNAME }}
#          key: ${{ secrets.EC@_PRIVATE_KEY }}
#          script_stop: true
#          script: |
#            cd/home/ubuntu/app/BE
#            git pull origin main
#            ./gradlew clean build -x test
#            sudo fuser -k -n tcp 8080 || true
#            nohup java -jar build/libs/*SNAPSHOT.jar > ./output.log 2>&1 &


jobs:
  Deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Github Repository에 올린 파일들 불러오기
        uses: actions/checkout@v4

      - name: gradlew에 실행 권한 부여
        run: chmod +x gradlew

      - name: JDK 17버전 설치
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - name : application.yml 파일 만들기
        run : echo "${{ secrets.APPLICATION_PROPERTIES }}" > src/main/resources/application.yml

      - name: 테스트 및 빌드하기
        run: ./gradlew clean build -stacktrace

      - name: 테스트 실패 상세 로그 출력 (정확한 Bean 에러 확인용)
        if: failure()
        run: cat build/reports/tests/test/classes/supercoding.pj2.Pj2ApplicationTests.html || echo "클래스 리포트 없음"

      - name: 빌드된 파일 이름 변경하기
        run: mv ./build/libs/*SNAPSHOT.jar ./project.jar

      - name: SCP로 EC2에 빌드된 파일 전송하기
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          source: project.jar
          target: /home/ubuntu/BE/tobe


      - name: SSH로 EC2에 접속하기
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script_stop: true
          script: |
            export AWS_ACCESS_KEY=${{ secrets.AWS_ACCESS_KEY }}
            export AWS_SECRET_KEY=${{ secrets.AWS_SECRET_KEY }}
            
            export AWS_REGION=${{ secrets.AWS_REGION }}
            export AWS_BUCKET_NAME=${{ secrets.AWS_BUCKET_NAME }}
          
          
            export SPRING_DATASOURCE_URL=${{ secrets.SPRING_DATASOURCE_URL }}
            export SPRING_DATASOURCE_USERNAME=${{ secrets.SPRING_DATASOURCE_USERNAME }}
            export SPRING_DATASOURCE_PASSWORD=${{ secrets.SPRING_DATASOURCE_PASSWORD }}
            
            export KAKAO_CLIENT_ID=${{ secrets.KAKAO_CLIENT_ID }}
            export KAKAO_CLIENT_SECRET=${{ secrets.KAKAO_CLIENT_SECRET }}
            export KAKAO_REDIRECT_URI=${{ secrets.KAKAO_REDIRECT_URI }}
            export NAVER_CLIENT_ID=${{ secrets.NAVER_CLIENT_ID }}
            export NAVER_CLIENT_SECRET=${{ secrets.NAVER_CLIENT_SECRET }}
            export NAVER_REDIRECT_URI=${{ secrets.NAVER_REDIRECT_URI }}
           
           
           
            export GOOGLE_REDIRECT_URI=${{ secrets.GOOGLE_REDIRECT_URI }}
            export GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}
            export GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}
            rm -rf /home/ubuntu/BE/current
            mkdir /home/ubuntu/BE/current
            mv /home/ubuntu/BE/tobe/project.jar /home/ubuntu/BE/current/project.jar
            cd /home/ubuntu/BE/current
            sudo fuser -k - n tcp 8080 || true
            nohup java -jar project.jar > ./output.log 2>&1 &
            rm -rf /home/ubuntu/BE/tobe