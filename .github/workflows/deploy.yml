name: Deploy to EC2

on:
  push:
    branches:
      - main


jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Github Repository 파일 불러오기
        uses: actions/checkout@v4

      - name: gradlew에 실행 권한 부여
        run: chmod +x gradlew

      - name: JDK 17버전 설치
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - name: application.yml 파일 만들기
        run: echo "${{ secrets.APPLICATION_PROPERTIES }}" > ./src/main/resources/application.yml

      - name: 테스트 및 빌드하기
        run: ./gradlew clean build

      - name: AWS Resource에 접근할 수 있게 AWS credentials 설정
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ap-northeast-2
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: ECR에 로그인하기
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Docker 이미지 생성
        run: docker build -t supercodingpj2-server .

      - name: Docker 이미지에 Tag 붙이기
        run: docker tag supercodingpj2-server ${{ steps.login-ecr.outputs.registry }}/supercodingpj2-server:latest

      - name: ECR에 Docker 이미지 Push하기
        run: docker push ${{ steps.login-ecr.outputs.registry }}/supercodingpj2-server:latest

      - name: SSH로 EC2에 접속하기
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script_stop: true
          script: |
            docker stop supercodingpj2-server || true
            docker rm supercodingpj2-server || true
            docker pull ${{ steps.login-ecr.outputs.registry }}/supercodingpj2-server:latest
            docker run -d --name instagram-server -p 8080:8080 ${{ steps.login-ecr.outputs.registry }}/supercodingpj2-server:latest
            
            
#            echo "[1] 디버깅: 실제 레지스트리 주소 확인"
#            echo "${{ steps.login-ecr.outputs.registry }}"
#
#            echo "[2] 디버깅: 풀 경로 확인"
#            echo "${{ steps.login-ecr.outputs.registry }}/supercodingpj2-server:${{ github.sha }}"
#
#            export PATH=$PATH:/home/ubuntu/.local/bin
#            echo "[1] AWS ECR 로그인"
#            aws ecr get-login-password --region ap-northeast-2 \
#             | docker login --username AWS \
#             --password-stdin \
#            ${{ steps.login-ecr.outputs.registry }}
#
#            echo "[2] 기존 컨테이너 종료 및 제거"
#            docker stop app-container || true
#            docker rm app-container || true
#
#            echo "[3] 최신 이미지 Pull"
#            docker pull ${{ steps.login-ecr.outputs.registry }}/supercodingpj2-server:${{ github.sha }}
#
#            echo "[4] 새 컨테이너 실행"
#            docker run -d --name app-container -p 8080:8080 \
#             ${{ steps.login-ecr.outputs.registry }}/supercodingpj2-server:${{ github.sha }}
#

